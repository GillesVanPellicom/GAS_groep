from Stock import *
from src.wrappers.MasterWrapper import *
from Honing import *
from Chocoladeshot import *
from Chilipeper import *
from Marshmallow import *
from enum import Enum
class ChocolademelkVloeistof(Enum):
    MELK = 1
    ROOM = 2

class Chocolademelk:
    # ADT Chocolademelk
    ## data
    id = None  # No id on init, Primary key, Auto increment
    price = 2  # Price in eur
    chocoladeShot = MasterWrapper()
    honing = MasterWrapper()
    marshmallow = MasterWrapper()
    chillipeper = MasterWrapper()
    credits = 5
    vloeistof = ChocolademelkVloeistof.MELK
    stock = None


    def __init__(self, ingredientList, stock):
        self.stock = stock
        self.calculate(ingredientList)

    """
    Parses ingredient list from parser

    Precondition: valid ingredientslist as input
    Postcondition: sets all variables of Chocolademelk by means of helper methods

    @type ingredientList: MasterWrapper
    @param ingredientList: The list of ingredients generated by parser
    """
    def calculate(self, ingredientList):
        """
        Iterates over list of ingredients from parser and calls appropriate functions
        :return:
        """
        for i in range(ingredientList.tableLength()):
            ingr = ingredientList.tableRetrieve(i)[0]
            if ingr == "wit":
                self.addChocoladeshot(0)
            elif ingr == "melk":
                self.addChocoladeshot(1)
            elif ingr == "bruin":
                self.addChocoladeshot(2)
            elif ingr == "zwart":
                self.addChocoladeshot(3)
            elif ingr == "chili":
                self.addChilipeper()
            elif ingr == "marshmallow":
                self.addMarshmallow()
            elif ingr == "honing":
                self.addHoning()


    ## functionaliteit
    """
    Adds schocoladeshot to chocolademelk and removes from stock
    Modifies price and credits appropriate to add

    Precondition: stock for this product is not empty
    Postcondition: removes product from stock and adds to chocolademelk

    @type soort: integer
    @param soort: int used to tell chocolatekind
    
    @rtype: boolean
    @returns: true if success
    """
    def addChocoladeshot(self, soort):

        self.price += 1
        self.credits += 1

        temp = self.stock.use_chocoladeshot(soort)
        if temp is None:
            print("No more stock for chocoladeshot")
            return False
        self.chocoladeShot.tableInsert(temp)

        return True
    """
    Adds honing to chocolademelk and removes from stock
    Modifies price and credits appropriate to add

    Precondition: stock for this product is not empty
    Postcondition: removes product from stock and adds to chocolademelk
    
    @rtype: boolean
    @returns: true if success
    """
    def addHoning(self):

        self.price += 0.5
        self.credits += 1

        temp = self.stock.use_honing()
        if temp is None:
            print("No more stock for honing")
            return False
        self.honing.tableInsert(temp)

        return True


    """
    Adds marshmallow to chocolademelk and removes from stock
    Modifies price and credits appropriate to add

    Precondition: stock for this product is not empty
    Postcondition: removes product from stock and adds to chocolademelk
    
    @rtype: boolean
    @returns: true if success
    """
    def addMarshmallow(self):

        self.price += 0.75
        self.credits += 1

        temp = self.stock.use_marshmallow()
        if temp is None:
            print("No more stock for marshmallow")
            return False
        self.marshmallow.tableInsert(temp)

        return True

    """
    Adds chilipeper to chocolademelk and removes from stock
    Modifies price and credits appropriate to add

    Precondition: stock for this product is not empty
    Postcondition: removes product from stock and adds to chocolademelk
    
    @rtype: boolean
    @returns: true if success
    """
    def addChilipeper(self):

        self.price += 0.25
        self.credits += 1

        temp = self.stock.use_chilipeper()
        if temp is None:
            print("No more stock for chillipeper")
            return False
        self.chillipeper.tableInsert(temp)

        return True
